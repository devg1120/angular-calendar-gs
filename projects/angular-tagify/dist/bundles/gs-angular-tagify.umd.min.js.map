{"version":3,"sources":["ng://@gs/angular-tagify/lib/tagify.service.ts","ng://@gs/angular-tagify/lib/tagify.component.ts","ng://@gs/angular-tagify/lib/tagify.module.ts"],"names":["TagifyService","prototype","getTagifyRef","tagifyInputRef","settings","arguments","length","this","tagify","Tagify","removeAll","removeAllTags","addTags","tags","destroy","Injectable","args","providedIn","TagifyComponent","tagifyService","add","EventEmitter","remove","ngAfterViewInit","_this","callbacks","emit","value","added","nativeElement","Component","selector","template","Output","Input","ViewChild","static","TagifyModule","forRoot","ngModule","providers","NgModule","declarations","exports","imports","CommonModule"],"mappings":"waAAA,IAAAA,EAAA,WAWE,SAAAA,YAKAA,EAAAC,UAAAC,aAAA,SAAaC,EAA4BC,GACvC,GAAyB,IAArBC,UAAUC,OACd,OAAIC,KAAKC,OAAeD,KAAKC,QAC7BD,KAAKC,OAAS,IAAIC,EAAQN,EAAgBC,GAEnCG,KAAKC,SAMPR,EAAAC,UAAAS,UAAP,WACE,OAAOH,KAAKC,OAAOG,iBAMdX,EAAAC,UAAAW,QAAP,SAAeC,GACb,OAAON,KAAKC,OAAOI,QAAQC,IAMtBb,EAAAC,UAAAa,QAAP,WACE,OAAOP,KAAKC,OAAOM,+BAtCtBC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJALd,GCyBA,IAAAC,EAAA,WAUE,SAAAA,EAAoBC,GAAAZ,KAAAY,cAAAA,EAJVZ,KAAAa,IAAM,IAAIC,EAAAA,aACVd,KAAAe,OAAS,IAAID,EAAAA,aAsBzB,OAZEH,EAAAjB,UAAAsB,gBAAA,WAAA,IAAAC,EAAAjB,KACOA,KAAKH,WACVG,KAAKH,SAASqB,UAAY,CACxBL,IAAG,WAAQ,OAAAI,EAAKJ,IAAIM,KAAK,CACvBb,KAAMW,EAAKhB,OAAOmB,MAClBC,MAAOJ,EAAKhB,OAAOmB,MAAMH,EAAKhB,OAAOmB,MAAMrB,OAAS,MAEtDgB,OAAM,WAAQ,OAAAE,EAAKF,OAAOI,KAAKF,EAAKhB,OAAOmB,SAG7CpB,KAAKC,OAASD,KAAKY,cAAcjB,aAAaK,KAAKJ,eAAe0B,cAAetB,KAAKH,gCA3BzF0B,EAAAA,UAASd,KAAA,CAAC,CACTe,SAAU,SACVC,SAAU,yFA1BJhC,kCA8BLiC,EAAAA,uBACAA,EAAAA,yBACAC,EAAAA,8BAKAC,EAAAA,UAASnB,KAAA,CAAC,iBAAiB,CAACoB,QAAQ,OAgBvClB,EA7BA,GCzBA,IAAAmB,EAAA,WAKA,SAAAA,KAaA,OANSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAAExC,yBAVlByC,EAAAA,SAAQzB,KAAA,CAAC,CACR0B,aAAc,CAACxB,GACfyB,QAAS,CAACzB,GACV0B,QAAS,CAACC,EAAAA,cACVL,UAAW,CAACxC,OASdqC,EAlBA","sourcesContent":["import {ElementRef, Injectable} from '@angular/core';\nimport * as Tagify from '@yaireo/tagify';\nimport { SettingsModel } from './tagify.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagifyService {\n\n  private tagify: Tagify;\n\n  constructor() {}\n\n  /** @description Singleton used by TagifyComponent to a ref to tagify\n   * @returns tagify instance\n   */\n  getTagifyRef(tagifyInputRef: ElementRef, settings: SettingsModel) {\n    if (arguments.length === 0) return;\n    if (this.tagify) return this.tagify;\n    this.tagify = new Tagify( tagifyInputRef, settings);\n    //console.log(\"tagify\",this.tagify);\n    return this.tagify;\n  }\n\n  /**\n   * @description removes all tags\n   */\n  public removeAll() {\n    return this.tagify.removeAllTags();\n  }\n\n  /**\n   * @description add multiple tags\n   */\n  public addTags(tags) {\n    return this.tagify.addTags(tags);\n  }\n\n  /**\n   * @description destroy dom and everything\n   */\n  public destroy() {\n    return this.tagify.destroy();\n  }\n}\n","import {AfterViewInit, ElementRef, Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {TagifyService} from './tagify.service';\n\n\nexport interface SettingsModel {\n  delimiters?: string;\n  pattern?: string;\n  mode?: string;\n  duplicates?: boolean;\n  enforceWhitelist?: boolean;\n  autocomplete?: boolean;\n  whitelist?: string[];\n  blacklist?: string[];\n  addTagOnBlur?: boolean;\n  callbacks?: Object;\n  maxTags?: number;\n  transformTag?: Function;\n  tagTemplate?: Function;\n  'dropdown.enabled'?: number;\n  'dropdown.maxItems'?: string;\n  'dropdown.classname'?: string;\n  'dropdown.itemTemplate'?; Function;\n}\n\n\n@Component({\n  selector: 'tagify',\n  template: `<input *ngIf=\"settings\" #tagifyInputRef/>`\n  //styleUrls: ['./tagify.scss']\n})\nexport class TagifyComponent implements AfterViewInit {\n  @Output() add = new EventEmitter(); // returns the added tag + updated tags list\n  @Output() remove = new EventEmitter(); // returns the updated tags list\n  @Input() settings: SettingsModel; // get possible tagify settings\n\n  constructor(private tagifyService: TagifyService) { }\n\n  //@ViewChild('tagifyInputRef') tagifyInputRef: any;\n  @ViewChild('tagifyInputRef',{static: false}) public tagifyInputRef: ElementRef;  //GS\n\n  private tagify;\n\n  ngAfterViewInit() {\n    if (!this.settings) return;\n    this.settings.callbacks = {\n      add: () => this.add.emit({\n        tags: this.tagify.value,\n        added: this.tagify.value[this.tagify.value.length - 1]\n      }),\n      remove: () => this.remove.emit(this.tagify.value)\n    };\n    //console.dir(this.tagifyInputRef);\n    this.tagify = this.tagifyService.getTagifyRef(this.tagifyInputRef.nativeElement, this.settings);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TagifyComponent } from './tagify.component';\nimport {TagifyService} from './tagify.service';\n\n@NgModule({\n  declarations: [TagifyComponent],\n  exports: [TagifyComponent],\n  imports: [CommonModule],\n  providers: [TagifyService],\n})\nexport class TagifyModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: TagifyModule,\n      providers: [ TagifyService ]\n    };\n  }\n}\n"]}